{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { GlobalConstantsService } from 'src/app/GobalAPIService/global-constants.service';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthServicesService = /*#__PURE__*/(() => {\n  class AuthServicesService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.myHeaders = new HttpHeaders();\n      this.uri = GlobalConstantsService.apiURL;\n      this.serverUri = GlobalConstantsService.serverApiURL;\n      this.secureUri = GlobalConstantsService.secureApiURL;\n      this.customerId = sessionStorage.getItem(\"customerId\");\n      let user = sessionStorage.getItem('data');\n      let userSession = {\n        id: 0\n      };\n      if (user) userSession = JSON.parse(user);\n      this.userSubject = new BehaviorSubject(userSession);\n      this.user = this.userSubject.asObservable();\n      this.userSubject.subscribe(user => {\n        this.userStoreValue = user;\n        this.loginUser = undefined;\n      });\n    }\n\n    checkEmailDuplication(email) {\n      return this.http.get(`${this.uri}/signup/checkEmailDuplication/` + email);\n    }\n\n    Login(userName, oldPassword1) {\n      const obj = {\n        userName,\n        oldPassword1\n      };\n      return this.http.post(`${this.secureUri}/auth/signin`, obj);\n    }\n\n    getUniqueUsername(email) {\n      return this.http.get(`${this.secureUri}/login/profileDetails/` + email);\n    }\n\n    signUp(signupInfo) {\n      return this.http.post(`${this.uri}/signup/registerCustomer`, signupInfo);\n    }\n\n    forgotPass(forgot) {\n      return this.http.post(`${this.uri}/signup/forgotPassword`, forgot);\n    }\n\n    genratePassword(user) {\n      return this.http.post(`${this.uri}/signup/savePasswordAndSignIn`, user);\n    }\n\n    emailCheckgenratepassword(user) {\n      return this.http.post(`${this.uri}/signup/confirmCustomerDetail`, user);\n    }\n\n    UpdateDailySession(dailySessionInfo) {\n      return this.http.post(`${this.uri}/signup/UpdateDailySession`, dailySessionInfo);\n    }\n\n    getDailySession(dailySessionKey) {\n      // console.log(dailySessionKey);\n      return this.http.get(`${this.secureUri}/contact/getDailySession/` + dailySessionKey);\n    }\n\n    getIPAddress() {\n      return this.http.get(\"https://api.ipify.org/?format=json\");\n    }\n\n    getIpDetails(ipAddress, key) {\n      return this.http.get(\"https://ipwhois.pro/json/\" + ipAddress + \"?\" + key);\n    }\n\n    changePassword(user) {\n      return this.http.post(`${this.secureUri}/email/changePassword/` + this.customerId, user);\n    }\n\n    saveContactUs(contactUsData) {\n      return this.http.post(`${this.secureUri}/contact/saveContactUs`, contactUsData);\n    }\n\n    serverLogin(username, password) {\n      let authData = window.btoa('angular_id' + \":\" + 'Hello@123');\n      sessionStorage.setItem(\"auth\", authData);\n      return this.http.post(`${this.serverUri}/oauth/token?grant_type=password`, {}, {\n        params: {\n          username,\n          password\n        }\n      }).pipe(map(user => {\n        // console.log(\"inside auth service login\");\n        this.userSubject.next(user);\n        sessionStorage.setItem(\"data\", JSON.stringify(user));\n        sessionStorage.setItem(\"access_token\", user.access_token); // this.Login(username,password);\n\n        return user;\n      }), catchError(error => {\n        console.log(error, \"hgf\");\n        return throwError(error);\n      }));\n    }\n\n    userValue() {\n      // return this.userSubject.value;\n      // console.log(this.userStoreValue,\"lkjhg\");\n      if (!this.userStoreValue) {\n        let data;\n        data = sessionStorage.getItem('data');\n        if (data) this.userStoreValue = JSON.parse(data);\n      }\n\n      return this.userStoreValue;\n    }\n\n    isUserLogin() {\n      if (!this.loginUser) {\n        this.loginUser = this.userValue(); // console.log(this.loginUser,\"**\");\n      }\n\n      if (this.loginUser && this.loginUser.access_token) {\n        // console.log(\"return true\");\n        return true;\n      } // console.log(\"return false\");\n\n\n      return false;\n    }\n\n    logout() {\n      if (sessionStorage.getItem(\"data\")) {\n        // this.http.post<any>(`${environment.urlOauth2}/users/revoke-token`, {}, { withCredentials: true }).subscribe();\n        this.stopRefreshTokenTimer();\n        this.userSubject.next({\n          id: 0\n        });\n        this.loginUser = undefined; //this.router.navigate(['/login']);\n\n        var form = document.createElement(\"form\");\n        form.setAttribute(\"method\", \"GET\");\n        form.setAttribute(\"action\", document.location.href);\n        document.body.appendChild(form);\n        form.submit();\n      }\n    }\n\n    refreshToken() {\n      // console.log(\"getting refresh token\");\n      let data = sessionStorage.getItem(\"data\");\n      let userData = JSON.parse(data); //       this.myHeaders = this.myHeaders.set(\"refreshToken\", userData.refreshToken);\n\n      if (userData.refresh_token) {\n        return this.http.post(`${this.serverUri}/oauth/token?grant_type=refresh_token`, {}, {\n          headers: this.myHeaders,\n          withCredentials: true,\n          params: {\n            refresh_token: userData.refresh_token\n          }\n        }).pipe(map(user => {\n          userData.access_token = user.access_token;\n          this.userSubject.next(userData);\n          sessionStorage.setItem(\"data\", JSON.stringify(userData));\n          sessionStorage.setItem(\"access_token\", user.access_token);\n          return user;\n        }), catchError(error => {\n          this.logout();\n          console.log(\"Refresh token Error : \" + error);\n          return throwError(error);\n        }));\n      }\n    }\n\n    stopRefreshTokenTimer() {\n      sessionStorage.clear();\n    }\n\n    redirectToLogin() {\n      this.router.navigate(['/login']);\n    }\n\n  }\n\n  AuthServicesService.ɵfac = function AuthServicesService_Factory(t) {\n    return new (t || AuthServicesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthServicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthServicesService,\n    factory: AuthServicesService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthServicesService;\n})();","map":null,"metadata":{},"sourceType":"module"}