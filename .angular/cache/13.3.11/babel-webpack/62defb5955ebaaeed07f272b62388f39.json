{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth/auth-services/auth-services.service\";\nimport * as i2 from \"@angular/router\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(authenticationService, router) {\n      this.authenticationService = authenticationService;\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if ([401, 403].includes(err.status) && this.authenticationService.userValue()) {\n          // auto logout if 401 or 403 response returned from api\n          // console.log(\"dmsm\");\n          if (this.router.url != '/' && this.router.url != '/login') this.authenticationService.logout();\n          console.log(\"not auth\");\n        } //   const error = (err && err.error && err.error.message) || err.statusText;\n\n\n        console.log(err, \"error\");\n        return throwError(err);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthServicesService), i0.ɵɵinject(i2.Router));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}