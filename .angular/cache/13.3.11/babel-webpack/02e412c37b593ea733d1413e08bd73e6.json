{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { GlobalConstantsService } from '../GobalAPIService/global-constants.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth/auth-services/auth-services.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../GobalAPIService/global-service-service/PreviewService\";\nexport let RefreshTokenInterceptor = /*#__PURE__*/(() => {\n  class RefreshTokenInterceptor {\n    constructor(authenticationService, router, previewService) {\n      this.authenticationService = authenticationService;\n      this.router = router;\n      this.previewService = previewService;\n      this.refreshTokenInProgress = false; // Refresh Token Subject tracks the current token, or is null if no token is currently\n      // available (e.g. refresh pending).\n\n      this.refreshTokenSubject = new BehaviorSubject(null); // if (environment.debug ) console.log(\"loat http intercept \");\n\n      this.serverUri = GlobalConstantsService.serverApiURL;\n      this.apiUri = GlobalConstantsService.apiURL;\n      this.secureApiUri = GlobalConstantsService.secureApiURL;\n    }\n\n    intercept(request, next) {\n      // const isApiLoginUrl = request.url.startsWith(this.serverUri + \"/oauth/token?grant_type=password\");\n      const user = this.authenticationService.userValue();\n      const isApiUrl = request.url.startsWith(this.serverUri);\n      const isUrl = request.url.startsWith(this.apiUri);\n      const isSecureUrl = request.url.startsWith(this.secureApiUri);\n\n      if (!isApiUrl && !isSecureUrl && !isUrl && user && !user.refresh_token) {\n        if (this.router.url != '/' && this.router.url != '/login') this.authenticationService.redirectToLogin();\n        return throwError(\"Fail\");\n      } else {\n        // const isLoggedIn = user && user.access_token;\n        // console.log(\"inside if\");\n        if (isApiUrl) {\n          // console.log(\"intercepting\");\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Basic ${sessionStorage.getItem('auth')}`\n            } // request =\n            // res.header(\"Access-Control-Allow-Origin\", \"*\");\n            // res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n\n          }); // console.log(request, \"request 9000\");\n        } else if (isSecureUrl && !isApiUrl && !isUrl) {\n          let tokenNo = sessionStorage.getItem('access_token'); // request = request.clone({\n          //     headers: request.headers.set('Authorization', \"Bearer \" + tokenNo)\n\n          request = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${tokenNo}`\n            }\n          }); // console.log(request, \"request 8080\");\n        } else if (!isSecureUrl && !isApiUrl && isUrl) {\n          request = request;\n        } else {\n          request = this.addAuthenticationToken(request);\n        }\n\n        return next.handle(request).pipe(catchError(error => {\n          const isApiLoginUrl = request.url.startsWith(this.serverUri + \"/oauth/token?grant_type=password\"); // if (isApiUrl) {\n          //     return throwError(\"Fail\");\n          // }\n          // else if (isUrl && !isApiUrl) {\n          //     return throwError(\"Fail\");\n          // }\n\n          if (user) {\n            console.log(\"inside return\", user);\n\n            if (user.id == 0) {\n              this.previewService.setloginFlag = false;\n              console.log(this.previewService.getloginFlag);\n            }\n\n            if (user.refresh_token) {\n              // We don't want to refresh token for some requests like login or refresh token itself\n              // So we verify url and we throw an error if it's the case\n              if (request.url.includes(\"refresh-token\") || request.url.includes(\"login\")) {\n                // We do another check to see if refresh token failed\n                // In this case we want to logout user and to redirect it to login page\n                if (request.url.includes(\"refresh-token\")) {\n                  this.authenticationService.logout();\n                }\n\n                return throwError(error);\n              } // If error status is different than 401 we want to skip refresh token\n              // So we check that and throw the error if it's the case\n              // if (error.status != undefined && error.status !== 401) {\n\n\n              if (error.status != 401) {\n                //return Observable.throw(error);\n                return throwError(error);\n              }\n\n              if (this.refreshTokenInProgress) {\n                // If refreshTokenInProgress is true, we will wait until refreshTokenSubject has a non-null value\n                // – which means the new token is ready and we can retry the request again\n                return this.refreshTokenSubject.pipe(filter(token => token != null), take(1), switchMap(() => next.handle(this.addAuthenticationToken(request))));\n              } else {\n                this.refreshTokenInProgress = true; // Set the refreshTokenSubject to null so that subsequent API calls will wait until the new token has been retrieved\n\n                this.refreshTokenSubject.next(null); //Call auth.refreshAccessToken(this is an Observable that will be returned)\n\n                return this.authenticationService.refreshToken().pipe(switchMap(token => {\n                  //When the call to refreshToken completes we reset the refreshTokenInProgress to false\n                  // for the next time the token needs to be refreshed\n                  const user = this.authenticationService.userValue();\n                  this.refreshTokenInProgress = false;\n                  /*  if (isLoggedIn && isApiUrl) {\r\n                       if (request.url.indexOf(\"/users/refresh-token\") != -1 || request.url.indexOf(\"/users/revoke-token\") != -1) {\r\n                           request = request.clone({\r\n                               setHeaders: {\r\n                                   'Authorization': `Bearer ${user.jwtToken}`\r\n                                 }\r\n                             });\r\n                           request.headers.append('refreshToken', !user.refresh_token ? '' : user.refreshToken);\r\n                           }\r\n                       else {\r\n                           request = request.clone({\r\n                               setHeaders: { Authorization: `Bearer ${user.jwtToken}` }\r\n                           });\r\n                       }\r\n                       sessionStorage.setItem(\"data\", JSON.stringify(user));\r\n                       console.log(\"new access token received\");\r\n                   } */\n\n                  this.refreshTokenSubject.next(token);\n                  return next.handle(this.addAuthenticationToken(request));\n                }) // .cat\n                //     ((error: any) => {\n                //         this.refreshTokenInProgress = false;\n                //         this.authenticationService.logout();\n                //         return throwError(error);\n                //     })\n                );\n              }\n            }\n          } else {\n            this.previewService.setloginFlag = false;\n            console.log(this.previewService.loginFlag);\n            console.log(\"error 1\");\n          }\n        }));\n      }\n    }\n\n    addAuthenticationToken(request) {\n      const user = this.authenticationService.userValue(); // Get access token from Local Storage\n\n      if (!user) {\n        return request;\n      }\n\n      const accessToken = `Bearer ${user.access_token}`; // If access token is null this means that user is not logged in\n      // And we return the original request\n\n      if (!accessToken) {\n        return request;\n      } // if (environment.debug ) console.log(request.url);\n      // We clone the request, because the original request is immutable\n\n\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${user.access_token}`\n        }\n      });\n    }\n\n  }\n\n  RefreshTokenInterceptor.ɵfac = function RefreshTokenInterceptor_Factory(t) {\n    return new (t || RefreshTokenInterceptor)(i0.ɵɵinject(i1.AuthServicesService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.PreviewService));\n  };\n\n  RefreshTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RefreshTokenInterceptor,\n    factory: RefreshTokenInterceptor.ɵfac\n  });\n  return RefreshTokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}