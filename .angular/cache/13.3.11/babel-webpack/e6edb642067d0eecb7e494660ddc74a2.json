{"ast":null,"code":"import { GlobalConstantsService } from 'src/app/GobalAPIService/global-constants.service';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nconst EXCEL_EXTENSION = '.xlsx';\nexport let ConatctServicesService = /*#__PURE__*/(() => {\n  class ConatctServicesService {\n    constructor(http) {\n      this.http = http;\n      this.uri = GlobalConstantsService.apiURL;\n      this.secureUri = GlobalConstantsService.secureApiURL;\n    }\n\n    createList(listDetails) {\n      return this.http.post(`${this.secureUri}/list/createList`, listDetails);\n    }\n\n    getAllListDetails(customerId) {\n      return this.http.get(`${this.secureUri}/list/getAllListDetails/` + customerId);\n    }\n\n    getVerificationStatistic(customerId, listId) {\n      return this.http.get(`${this.secureUri}/contact/getVerificationStatistic/` + customerId + \"/\" + listId);\n    }\n\n    checkDuplicateList(listName, customerId) {\n      return this.http.get(`${this.secureUri}/list/checkDuplicateList/` + listName + \"/\" + customerId);\n    }\n\n    checkDuplicateDomain(domainName, customerId) {\n      return this.http.get(`${this.secureUri}/email/checkDuplicateDomain/` + domainName + \"/\" + customerId);\n    }\n\n    uploadContactList(fileData, customerId) {\n      var fd = new FormData();\n      fd.append('uploadfile', fileData);\n      return this.http.post(`${this.secureUri}/contact/uploadContactListMapping/` + customerId, fd);\n    } // verify contact\n\n\n    getMailIdVerification(originalEmailId) {\n      return this.http.get(`${this.secureUri}/contact/getMailIdVerification/` + originalEmailId);\n    } // add contact\n\n\n    getUniqueCustClient(originalEmailId) {\n      return this.http.get(`${this.secureUri}/contact/getUniqueCustClient/` + originalEmailId + \"/\" + sessionStorage.getItem('customerId'));\n    }\n\n    saveaddContact(contactInfo) {\n      return this.http.post(`${this.secureUri}/contact/saveaddContact`, contactInfo);\n    } //add sender\n\n\n    createSender(userInfo) {\n      return this.http.post(`${this.secureUri}/sender/createSender`, userInfo);\n    }\n\n    getAllSenderDetails(customerId) {\n      return this.http.get(`${this.secureUri}/sender/getAllSenderDetails/` + customerId);\n    }\n\n    checkDuplicateSender(customerId, emailAddress) {\n      return this.http.get(`${this.secureUri}/sender/checkDuplicateSender/` + customerId + \"/\" + emailAddress);\n    }\n\n    fetchAllContacts(firstId, lastId, listId, customerId) {\n      return this.http.get(`${this.secureUri}/list/fetchAllContacts/` + firstId + \"/\" + lastId + \"/\" + listId + \"/\" + customerId);\n    }\n\n    uploadFile(fileData, previewMapping, customerId, listId) {\n      var fd = new FormData();\n      fd.append('uploadfile', fileData);\n      fd.append('previewMapping', new Blob([JSON.stringify(previewMapping)], {\n        type: \"application/json\"\n      }));\n      return this.http.post(`${this.secureUri}/contact/uploadFile/` + customerId + \"/\" + listId, fd);\n    }\n\n    verifiyFile(fileData, previewMapping, customerId, listId) {\n      var fd = new FormData();\n      fd.append('uploadfile', fileData);\n      fd.append('previewMapping', new Blob([JSON.stringify(previewMapping)], {\n        type: \"application/json\"\n      }));\n      return this.http.post(`${this.secureUri}/contact/verifiyFile/` + customerId + \"/\" + listId, fd);\n    }\n\n    blockArchiveContactList(blackList, value) {\n      return this.http.post(`${this.secureUri}/list/blockArchiveContactList`, blackList);\n    }\n\n    blockContactList(blackList) {\n      return this.http.post(`${this.secureUri}/list/blockContactList`, blackList);\n    } //download as a .csv file\n\n\n    downloadCSVFile(data, filename = 'data') {\n      let csvData = this.ConvertToCSV(data, ['First_Name', 'Last_Name', 'Email_Address', 'Country_Code', 'Mobile_No', 'Date_of_birth', 'City', 'Company_Name', 'Blacklist', 'Archive', 'Unsubscribed']);\n      let blob = new Blob(['\\ufeff' + csvData], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      let dwldLink = document.createElement(\"a\");\n      let url = URL.createObjectURL(blob);\n      let isSafariBrowser = navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;\n\n      if (isSafariBrowser) {\n        //if Safari open in new window to save file with random filename.\n        dwldLink.setAttribute(\"target\", \"_blank\");\n      }\n\n      dwldLink.setAttribute(\"href\", url);\n      dwldLink.setAttribute(\"download\", filename + \".csv\");\n      dwldLink.style.visibility = \"hidden\";\n      document.body.appendChild(dwldLink);\n      dwldLink.click();\n      document.body.removeChild(dwldLink);\n    }\n\n    ConvertToCSV(objArray, headerList) {\n      let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n      let str = '';\n      let row = 'S.No,';\n\n      for (let index in headerList) {\n        row += headerList[index] + ',';\n      }\n\n      row = row.slice(0, -1);\n      str += row + '\\r\\n';\n\n      for (let i = 0; i < array.length; i++) {\n        let line = i + 1 + '';\n\n        for (let index in headerList) {\n          let head = headerList[index];\n          line += ',' + array[i][head];\n        }\n\n        str += line + '\\r\\n';\n      }\n\n      return str;\n    } //download a xlsx file\n\n\n    exportAsExcelFile(json, excelFileName) {\n      const worksheet = XLSX.utils.json_to_sheet(json);\n      const workbook = {\n        Sheets: {\n          'data': worksheet\n        },\n        SheetNames: ['data']\n      };\n      const excelBuffer = XLSX.write(workbook, {\n        bookType: 'xlsx',\n        type: 'array'\n      }); //const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });\n\n      this.saveAsExcelFile(excelBuffer, excelFileName);\n    }\n\n    saveAsExcelFile(buffer, fileName) {\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n    }\n\n    getClientCustMapList(customerClientId, customerId) {\n      return this.http.get(`${this.secureUri}/list/getClientCustMapList/` + customerClientId + \"/\" + customerId);\n    }\n\n    getClientCustMapCampaign(customerClientId, customerId) {\n      return this.http.get(`${this.secureUri}/list/getClientCustMapCampaign/` + customerClientId + \"/\" + customerId);\n    }\n\n    saveEditContact(contactInfo) {\n      return this.http.post(`${this.secureUri}/list/saveEditContact`, contactInfo);\n    }\n\n    mobileCountryCode() {\n      return this.http.get(`${this.uri}/signup/mobileCountryCode`);\n    }\n\n    senderVerficationMail(userInfo) {\n      return this.http.post(`${this.secureUri}/list/senderVerficationMail`, userInfo);\n    }\n\n    getListMaxAndMin(listId, customerId) {\n      return this.http.get(`${this.secureUri}/list/getListMaxAndMin/` + listId + \"/\" + customerId);\n    }\n\n    getDomainBlockList(customerId) {\n      return this.http.get(`${this.secureUri}/campaign/getDomainBlockList/` + customerId);\n    }\n\n    saveDomainBlocker(userInfo) {\n      return this.http.post(`${this.secureUri}/campaign/saveDomainBlocker`, userInfo);\n    }\n\n    deleteDomainBlockList(domainBlockerSkey) {\n      return this.http.get(`${this.secureUri}/campaign/deleteDomainBlockList/` + domainBlockerSkey);\n    }\n\n    getEmailNotification(customerId) {\n      return this.http.get(`${this.secureUri}/campaign/getEmailNotification/` + customerId);\n    }\n\n    sendEmailNotification(notificationData) {\n      return this.http.post(`${this.secureUri}/campaign/sendEmailNotification`, notificationData);\n    }\n\n    getUniqueEmailNoti(emailId, customerId) {\n      return this.http.get(`${this.secureUri}/campaign/getUniqueEmailNoti/` + emailId + \"/\" + customerId);\n    }\n\n    removeFromVerification(customerId, listId) {\n      return this.http.get(`${this.secureUri}/contact/removeFromVerification/` + customerId + \"/\" + listId);\n    }\n\n    uploadVerificationContact(customerId, listId, valid, invalid, unknown) {\n      return this.http.get(`${this.secureUri}/contact/uploadVerificationContact/` + customerId + \"/\" + listId + \"/\" + valid + \"/\" + invalid + \"/\" + unknown);\n    }\n\n    downLoadStatistic(customerId, listId, firstId, lastId) {\n      return this.http.get(`${this.secureUri}/contact/downLoadStatistic/` + customerId + \"/\" + listId + \"/\" + firstId + \"/\" + lastId);\n    }\n\n    deleteContact(data) {\n      return this.http.post(`${this.secureUri}/list/deleteContact`, data);\n    }\n\n    deleteContactFromList(data) {\n      return this.http.post(`${this.secureUri}/list/deleteContactFromList`, data, {\n        responseType: 'text'\n      });\n    }\n\n  }\n\n  ConatctServicesService.ɵfac = function ConatctServicesService_Factory(t) {\n    return new (t || ConatctServicesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ConatctServicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConatctServicesService,\n    factory: ConatctServicesService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConatctServicesService;\n})();","map":null,"metadata":{},"sourceType":"module"}