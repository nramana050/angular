{"ast":null,"code":"import Swal from 'sweetalert2'; // import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\n\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"src/app/GobalAPIService/global-service-service/PreviewService\";\nimport * as i4 from \"../contact-management-service/conatct-services.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"ngx-pagination\";\nimport * as i7 from \"ng2-search-filter\";\n\nfunction AllContactsComponent_select_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"select\", 38);\n    i0.ɵɵlistener(\"ngModelChange\", function AllContactsComponent_select_8_Template_select_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.activedeactive = $event;\n    });\n    i0.ɵɵelementStart(1, \"option\", 39);\n    i0.ɵɵtext(2, \"Select file type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"option\", 40);\n    i0.ɵɵtext(4, \".CSV\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"option\", 41);\n    i0.ɵɵtext(6, \".XLSX\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.activedeactive);\n  }\n}\n\nfunction AllContactsComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.loadingMessage();\n    });\n    i0.ɵɵtext(1, \"Download \");\n    i0.ɵɵelement(2, \"span\", 43);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.activeDeactive();\n    });\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2, \" Download\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AllContactsComponent_div_14_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 54);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_div_14_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.archiveblacklistContact(\"blacklist\");\n    });\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2, \" Blacklist\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AllContactsComponent_div_14_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_div_14_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.archiveblacklistContact(\"archive\");\n    });\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2, \" Archive\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AllContactsComponent_div_14_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_div_14_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.archiveblacklistContact(\"unsubscribe\");\n    });\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2, \" Unsubscribe\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction AllContactsComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 45)(1, \"input\", 46);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_div_14_Template_input_click_1_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.selectAll();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"div\", 7)(3, \"strong\", 47);\n    i0.ɵɵtext(4, \" Select All\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(5, AllContactsComponent_div_14_button_5_Template, 3, 0, \"button\", 48);\n    i0.ɵɵtemplate(6, AllContactsComponent_div_14_button_6_Template, 3, 0, \"button\", 49);\n    i0.ɵɵtemplate(7, AllContactsComponent_div_14_button_7_Template, 3, 0, \"button\", 49);\n    i0.ɵɵelementStart(8, \"select\", 50);\n    i0.ɵɵlistener(\"change\", function AllContactsComponent_div_14_Template_select_change_8_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.delete();\n    })(\"ngModelChange\", function AllContactsComponent_div_14_Template_select_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.filterDelete = $event;\n    });\n    i0.ɵɵelementStart(9, \"option\", 51);\n    i0.ɵɵtext(10, \"Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"option\", 52);\n    i0.ɵɵtext(12, \"Delete only from list\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"option\", 53);\n    i0.ɵɵtext(14, \"Delete from everywhere\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.filterFlg != \"Blacklist\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.filterFlg != \"Archive\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.filterFlg != \"Unsubscribe\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.filterDelete);\n  }\n}\n\nfunction AllContactsComponent_tr_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelement(1, \"td\", 56)(2, \"td\", 56)(3, \"td\", 56);\n    i0.ɵɵelementStart(4, \"div\")(5, \"td\", 56)(6, \"span\", 57)(7, \"h5\");\n    i0.ɵɵtext(8, \"Please wait.....\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(9, \"br\");\n    i0.ɵɵelementStart(10, \"div\", 58)(11, \"div\", 59)(12, \"span\", 60);\n    i0.ɵɵtext(13, \"Please wait\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"span\", 60);\n    i0.ɵɵtext(15, \"Loading...\");\n    i0.ɵɵelementEnd()()()()()();\n  }\n}\n\nfunction AllContactsComponent_tr_54_td_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1, \"Y\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_tr_54_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1, \"N\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_tr_54_td_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1, \"Y\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_tr_54_td_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1, \"N\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_tr_54_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1, \"Y\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_tr_54_td_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1, \"N\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_tr_54_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 61);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_tr_54_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r36);\n      const i_r28 = restoredCtx.index;\n      const ctx_r35 = i0.ɵɵnextContext();\n      return ctx_r35.setClickedRow(i_r28);\n    });\n    i0.ɵɵelementStart(1, \"td\", 27)(2, \"input\", 62);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_tr_54_Template_input_click_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r36);\n      const i_r28 = restoredCtx.index;\n      const ctx_r37 = i0.ɵɵnextContext();\n      return ctx_r37.toggleSelection($event, i_r28);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"td\")(4, \"a\", 63);\n    i0.ɵɵlistener(\"click\", function AllContactsComponent_tr_54_Template_a_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r36);\n      const i_r28 = restoredCtx.index;\n      const info_r27 = restoredCtx.$implicit;\n      const ctx_r38 = i0.ɵɵnextContext();\n      return ctx_r38.redirectToEditContact(i_r28, info_r27.customerClientId);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, AllContactsComponent_tr_54_td_12_Template, 2, 0, \"td\", 28);\n    i0.ɵɵtemplate(13, AllContactsComponent_tr_54_td_13_Template, 2, 0, \"td\", 28);\n    i0.ɵɵtemplate(14, AllContactsComponent_tr_54_td_14_Template, 2, 0, \"td\", 28);\n    i0.ɵɵtemplate(15, AllContactsComponent_tr_54_td_15_Template, 2, 0, \"td\", 28);\n    i0.ɵɵtemplate(16, AllContactsComponent_tr_54_td_16_Template, 2, 0, \"td\", 28);\n    i0.ɵɵtemplate(17, AllContactsComponent_tr_54_td_17_Template, 2, 0, \"td\", 28);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const info_r27 = ctx.$implicit;\n    const i_r28 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", i_r28 == ctx_r5.selectedRow);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"check_\", info_r27.customerClient.customerClientId, \"\");\n    i0.ɵɵproperty(\"checked\", ctx_r5.checkboxes[i_r28]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(info_r27.customerClient.originalEmailId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(info_r27.customerClient.firstName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(info_r27.customerClient.lastName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", info_r27.customerClient.mobileCountryCode, \"\\u00A0\", info_r27.customerClient.mobileNo, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", info_r27.customerClient.blacklist == \"1\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", info_r27.customerClient.blacklist == null || info_r27.customerClient.blacklist == \"0\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", info_r27.customerClient.archive == \"1\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", info_r27.customerClient.archive == \"0\" || info_r27.customerClient.archive == null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", info_r27.customerClient.unsubscribed == \"1\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", info_r27.customerClient.unsubscribed == \"0\" || info_r27.customerClient.unsubscribed == null);\n  }\n}\n\nfunction AllContactsComponent_div_64_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 65);\n    i0.ɵɵtext(1, \" Please enter value greater than 0.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AllContactsComponent_div_64_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AllContactsComponent_div_64_p_1_Template, 2, 0, \"p\", 64);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r6 = i0.ɵɵreference(63);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r6.errors == null ? null : _r6.errors.pattern);\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    itemsPerPage: a0,\n    currentPage: a1\n  };\n};\n\nexport let AllContactsComponent = /*#__PURE__*/(() => {\n  class AllContactsComponent {\n    constructor(router, location, previewService, conatctServicesService) {\n      this.router = router;\n      this.location = location;\n      this.previewService = previewService;\n      this.conatctServicesService = conatctServicesService;\n      this.customerClientIdList = [];\n      this.customerClientList = [];\n      this.downloadCustomerData = [];\n      this.blackList = [];\n      this.dataForExcel = []; //end code\n\n      this.itrationCount = null;\n      this.term = \"\";\n      this.filterFlg = \"\";\n      this.filterDelete = \"\"; //Pagination\n\n      this.p = 1;\n      this.showData = {\n        rowsPerPage: 5\n      };\n      this.selectFilter = null;\n      this.filter = ['.CSV', '.XLSX / .XLS'];\n      this.allContactData = [];\n      this.selectedallContactList = {};\n      this.allcustomerClientIdList = [];\n      this.userData = {\n        listId: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        originalEmailId: \"\",\n        mobileNo: \"\",\n        dob: \"\",\n        customerClientId: \"\",\n        blacklist: \"\"\n      };\n      this.archiveallcontact = {};\n      this.deletecontactList = [];\n      this.deletecontact = {};\n      this.title = \"Select all/Deselect all checkbox \";\n\n      if (this.previewService.selectedallContactList != null && this.previewService.selectedallContactList != undefined && this.previewService.selectedallContactList != \"\") {\n        this.userData = this.previewService.selectedallContactList;\n\n        if (sessionStorage.getItem(\"listId\") != null && sessionStorage.getItem(\"listId\") != undefined && sessionStorage.getItem(\"listId\") != \"\") {\n          this.fetchAllContacts(sessionStorage.getItem(\"listId\"), this.userData.contactCount); // console.log(this.userData.contactCount, \"--------------\");\n        } else {\n          this.router.navigate(['/create-list']);\n        }\n      } else {\n        this.router.navigate(['/create-list']);\n      }\n\n      this.groupData = this.organise(this.downloadCustomerData);\n    }\n\n    ngOnInit() {\n      this.checkboxes = new Array(this.userData.length);\n      this.checkboxes.fill(false);\n      this.activedeactive = 0; //this.fetchAllContacts(sessionStorage.getItem(\"listId\"));       \n    }\n\n    setClickedRow(index) {\n      this.selectedRow = index;\n    }\n\n    selectAll() {\n      if ($(\"#allcheck\").is(\":checked\")) {\n        for (let i in this.customerClientIdList) {\n          $(\"#check_\" + this.customerClientIdList[i].customerClientId).prop(\"checked\", true);\n        }\n      } else {\n        for (let i in this.customerClientIdList) {\n          $(\"#check_\" + this.customerClientIdList[i].customerClientId).prop(\"checked\", false);\n        }\n      }\n    }\n\n    toggleSelection(event, i) {// this.checkboxes[i] = event.target.checked;\n    }\n\n    loadingMessage() {\n      Swal.fire(\"Please wait while data is loading...\");\n    }\n\n    redirectToEditContact(i, customerClientId) {\n      this.selectedallContactList = [];\n\n      for (let i in this.customerClientIdList) {\n        if (this.customerClientIdList[i].customerClientId == customerClientId) {\n          this.selectedallContactList = this.customerClientIdList[i];\n          sessionStorage.setItem('originalEmailId', this.customerClientIdList[i].customerClient.originalEmailId);\n          sessionStorage.setItem('customerClientId', this.customerClientIdList[i].customerClient.customerClientId);\n        }\n      }\n\n      this.selectedallContactList.contactCount = this.userData.contactCount;\n      this.previewService.selectedallContactList = this.selectedallContactList;\n      this.router.navigate(['/edit-contact']);\n    }\n\n    filterData() {\n      this.allContactData = [];\n\n      for (let i in this.customerClientIdList) {\n        if (this.filterFlg === \"Blacklist\" && this.customerClientIdList[i].customerClient.blacklist == '1') {\n          this.allContactData.push(this.customerClientIdList[i]);\n        } else if (this.filterFlg === \"Archive\" && this.customerClientIdList[i].customerClient.archive == '1') {\n          this.allContactData.push(this.customerClientIdList[i]);\n        } else if (this.filterFlg === \"Unsubscribe\" && this.customerClientIdList[i].customerClient.unsubscribed == '1') {\n          this.allContactData.push(this.customerClientIdList[i]);\n        }\n\n        if (this.filterFlg === \"\" || this.filterFlg === \" \") {\n          this.allContactData.push(this.customerClientIdList[i]);\n        }\n      }\n    }\n\n    fetchAllContacts(listId, contactCount) {\n      this.customerClientIdList = [];\n      this.allContactData = [];\n      this.itrationCount = 1;\n      let startNo = 0;\n      let size = 500;\n      let count = Number(contactCount);\n      let itration = Math.ceil(count / size);\n\n      for (var i = 0; i <= itration; i++) {\n        this.itrationCount++;\n\n        if (i != 0) {\n          startNo = size + startNo;\n        }\n\n        let resp = this.conatctServicesService.fetchAllContacts(startNo, size, sessionStorage.getItem(\"listId\"), sessionStorage.getItem(\"customerId\"));\n        resp.subscribe(data => {\n          this.itrationCount--;\n\n          if (data != null) {\n            if (data[0].customerId != null && data[0].customerId != \"\") {\n              for (let i in data) {\n                this.customerClientIdList.push(data[i]);\n                this.allContactData.push(data[i]);\n              }\n            }\n          }\n        });\n      }\n    } // new changes\n\n\n    archiveblacklistContact(value) {\n      this.archiveallcontact = {};\n      this.archivecontactList = [];\n\n      for (let i in this.allContactData) {\n        if ($(\"#check_\" + this.allContactData[i].customerClient.customerClientId).is(\":checked\")) {\n          this.archiveallcontact.customerClientId = JSON.parse(JSON.stringify(this.allContactData[i].customerClientId));\n          this.archiveallcontact.listId = JSON.parse(JSON.stringify(this.allContactData[i].listId));\n\n          if (value == \"archive\") {\n            this.archiveallcontact.archive = \"1\";\n            this.archiveallcontact.action = \"archive\";\n          } else if (value == \"unsubscribe\") {\n            this.archiveallcontact.unsubscribed = \"1\";\n            this.archiveallcontact.action = \"unsubscribe\";\n          } else {\n            this.archiveallcontact.blacklist = \"1\";\n            this.archiveallcontact.action = \"blacklist\";\n          }\n\n          this.archiveallcontact.customerId = sessionStorage.getItem(\"customerId\");\n          this.archivecontactList.push(JSON.parse(JSON.stringify(this.archiveallcontact)));\n        }\n      }\n\n      if (this.archivecontactList.length != 0) {\n        if (value == \"archive\") {\n          Swal.fire({\n            title: this.archivecontactList.length + ' record selected !',\n            text: \"Are you sure want to archive!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes, Archive it!'\n          }).then(result => {\n            if (result.isConfirmed) {\n              let resp = this.conatctServicesService.blockArchiveContactList(this.archivecontactList, value);\n              resp.subscribe(data => {\n                if (data != 0) {\n                  for (let i in this.customerClientIdList) {\n                    if ($(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).is(\":checked\")) {\n                      if (value == \"archive\") {\n                        this.customerClientIdList[i].customerClient.archive = \"1\";\n                      } else if (value == \"unsubscribe\") {\n                        this.customerClientIdList[i].customerClient.unsubscribed = \"1\";\n                      } else {\n                        this.customerClientIdList[i].customerClient.blacklist = \"1\";\n                      }\n\n                      if ($(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", true) || $(\"#allcheck\").is(\":checked\") == true) {\n                        $(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", false);\n                        $(\"#allcheck\").prop(\"checked\", false);\n                      } else {\n                        $(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", false);\n                        $(\"#allcheck\").prop(\"checked\", false);\n                      }\n                    }\n                  }\n\n                  Swal.fire('Archive!', 'Conatct has been archived', 'success');\n                }\n\n                this.filterData();\n              });\n            }\n          });\n        } else if (value == \"unsubscribe\") {\n          Swal.fire({\n            title: this.archivecontactList.length + ' record selected !',\n            text: \"Are you sure want to unsubscribe!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes, Unsubscribe it!'\n          }).then(result => {\n            if (result.isConfirmed) {\n              let resp = this.conatctServicesService.blockArchiveContactList(this.archivecontactList, value);\n              resp.subscribe(data => {\n                if (data != 0) {\n                  for (let i in this.customerClientIdList) {\n                    if ($(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).is(\":checked\")) {\n                      if (value == \"archive\") {\n                        this.customerClientIdList[i].customerClient.archive = \"1\";\n                      } else if (value == \"unsubscribe\") {\n                        this.customerClientIdList[i].customerClient.unsubscribed = \"1\";\n                      } else {\n                        this.customerClientIdList[i].customerClient.blacklist = \"1\";\n                      }\n                    }\n\n                    if ($(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", true) || $(\"#allcheck\").is(\":checked\") == true) {\n                      $(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", false);\n                      $(\"#allcheck\").prop(\"checked\", false);\n                    } else {\n                      $(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", false);\n                      $(\"#allcheck\").prop(\"checked\", false);\n                    }\n                  }\n\n                  Swal.fire('Unsubscribe!', 'Conatct has been unsubscribed', 'success');\n                }\n\n                this.filterData();\n              });\n            }\n          });\n        } else {\n          Swal.fire({\n            title: this.archivecontactList.length + ' record selected !',\n            text: \"Are you sure want to blacklist!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Yes, Blacklist it!'\n          }).then(result => {\n            if (result.isConfirmed) {\n              let resp = this.conatctServicesService.blockArchiveContactList(this.archivecontactList, value);\n              resp.subscribe(data => {\n                if (data != 0) {\n                  for (let i in this.customerClientIdList) {\n                    if ($(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).is(\":checked\")) {\n                      if (value == \"archive\") {\n                        this.customerClientIdList[i].customerClient.archive = \"1\";\n                      } else if (value == \"unsubscribe\") {\n                        this.customerClientIdList[i].customerClient.unsubscribed = \"1\";\n                      } else {\n                        this.customerClientIdList[i].customerClient.blacklist = \"1\";\n                      }\n                    }\n\n                    if ($(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", true) || $(\"#allcheck\").is(\":checked\") == true) {\n                      $(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", false);\n                      $(\"#allcheck\").prop(\"checked\", false);\n                    } else {\n                      $(\"#check_\" + this.customerClientIdList[i].customerClient.customerClientId).prop(\"checked\", false);\n                      $(\"#allcheck\").prop(\"checked\", false);\n                    }\n                  }\n\n                  Swal.fire('Blacklist!', 'Conatct has been blacklisted', 'success');\n                }\n\n                this.filterData();\n              });\n            }\n          });\n        }\n      } else {\n        Swal.fire(\"Please select at least one contact!\");\n      }\n    }\n\n    download() {\n      this.customerClientList = [];\n      this.downloadCustomerData = [];\n\n      for (let i in this.allContactData) {\n        this.customerClientList.dob = moment(this.allContactData[i].dob).format('DD-MM-YYYY');\n        this.customerClientList = this.allContactData[i].customerClient;\n\n        if (this.allContactData[i].customerClient.blacklist == \"1\") {\n          this.customerClientList.Blacklist = this.allContactData[i].customerClient.blacklist;\n          this.customerClientList.Blacklist = \"Y\";\n        } else {\n          this.customerClientList.Blacklist = \"N\";\n        }\n\n        if (this.allContactData[i].customerClient.archive == \"1\") {\n          this.customerClientList.Archive = this.allContactData[i].customerClient.archive;\n          this.customerClientList.Archive = \"Y\";\n        } else {\n          this.customerClientList.Archive = \"N\";\n        }\n\n        if (this.allContactData[i].customerClient.unsubscribed == \"1\") {\n          this.customerClientList.Unsubscribed = this.allContactData[i].customerClient.unsubscribed;\n          this.customerClientList.Unsubscribed = \"Y\";\n        } else {\n          this.customerClientList.Unsubscribed = \"N\";\n        }\n\n        if (this.allContactData[i].customerClient.firstName != null) {\n          this.customerClientList.First_Name = this.allContactData[i].customerClient.firstName;\n        } else {\n          this.customerClientList.First_Name = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.lastName != null) {\n          this.customerClientList.Last_Name = this.allContactData[i].customerClient.lastName;\n        } else {\n          this.customerClientList.Last_Name = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.originalEmailId != null) {\n          this.customerClientList.Email_Address = this.allContactData[i].customerClient.originalEmailId;\n        } else {\n          this.customerClientList.Email_Address = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.mobileCountryCode != null) {\n          this.customerClientList.Country_Code = this.allContactData[i].customerClient.mobileCountryCode;\n        } else {\n          this.customerClientList.Country_Code = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.mobileNo != null) {\n          this.customerClientList.Mobile_No = this.allContactData[i].customerClient.mobileNo;\n        } else {\n          this.customerClientList.Mobile_No = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.dob != null) {\n          this.customerClientList.Date_of_birth = moment(this.allContactData[i].customerClient.dob).format('YYYY-MM-DD');\n        } else {\n          this.customerClientList.Date_of_birth = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.city != null) {\n          this.customerClientList.City = this.allContactData[i].customerClient.city;\n        } else {\n          this.customerClientList.City = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.companyName != null) {\n          this.customerClientList.Company_Name = this.allContactData[i].customerClient.companyName;\n        } else {\n          this.customerClientList.Company_Name = \"\";\n        }\n\n        this.downloadCustomerData.push(this.customerClientList);\n      }\n\n      this.conatctServicesService.downloadCSVFile(this.downloadCustomerData, sessionStorage.getItem(\"listName\"));\n    }\n\n    exportAsXLSX() {\n      this.customerClientList = [];\n      this.downloadCustomerData = [];\n\n      for (let i in this.allContactData) {\n        this.customerClientList = {};\n        this.customerClientList.First_Name = this.allContactData[i].customerClient.firstName;\n        this.customerClientList.Last_Name = this.allContactData[i].customerClient.lastName;\n        this.customerClientList.Email_Address = this.allContactData[i].customerClient.originalEmailId;\n\n        if (this.allContactData[i].customerClient.mobileCountryCode != null || this.allContactData[i].customerClient.mobileCountryCode != '') {\n          this.customerClientList.Country_Code = this.allContactData[i].customerClient.mobileCountryCode;\n        } else {\n          this.customerClientList.Country_Code = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.mobileNo != null || this.allContactData[i].customerClient.mobileNo != null) {\n          this.customerClientList.Mobile_No = this.allContactData[i].customerClient.mobileNo;\n        } else {\n          this.customerClientList.Mobile_No = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.dob != null) {\n          this.customerClientList.Date_of_birth = moment(this.allContactData[i].customerClient.dob).format('YYYY-MM-DD');\n        } else {\n          this.customerClientList.Date_of_birth = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.city != null) {\n          this.customerClientList.City = this.allContactData[i].customerClient.city;\n        } else {\n          this.customerClientList.City = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.companyName != null) {\n          this.customerClientList.Company_Name = this.allContactData[i].customerClient.companyName;\n        } else {\n          this.customerClientList.Company_Name = \"\";\n        }\n\n        if (this.allContactData[i].customerClient.blacklist == \"1\") {\n          this.customerClientList.Blacklist = this.allContactData[i].customerClient.blacklist;\n          this.customerClientList.Blacklist = \"Y\";\n        } else {\n          this.customerClientList.Blacklist = \"N\";\n        }\n\n        if (this.allContactData[i].customerClient.archive == \"1\") {\n          this.customerClientList.Archive = this.allContactData[i].customerClient.archive;\n          this.customerClientList.Archive = \"Y\";\n        } else {\n          this.customerClientList.Archive = \"N\";\n        }\n\n        if (this.allContactData[i].customerClient.unsubscribed == \"1\") {\n          this.customerClientList.Unsubscribed = this.allContactData[i].customerClient.unsubscribed;\n          this.customerClientList.Unsubscribed = \"Y\";\n        } else {\n          this.customerClientList.Unsubscribed = \"N\";\n        } // console.log(this.allContactData);\n\n\n        this.downloadCustomerData.push(this.customerClientList);\n      }\n\n      this.conatctServicesService.exportAsExcelFile(this.downloadCustomerData, sessionStorage.getItem(\"listName\"));\n    }\n\n    organise(arr) {\n      var headers = [],\n          // an Array to let us lookup indicies by group\n      objs = [],\n          // the Object we want to create\n      i,\n          j;\n\n      for (i = 0; i < arr.length; ++i) {\n        j = headers.indexOf(arr[i].id); // lookup\n\n        if (j === -1) {\n          // this entry does not exist yet, init\n          j = headers.length;\n          headers[j] = arr[i].id;\n          objs[j] = {};\n          objs[j].id = arr[i].id;\n          objs[j].this.downloadCustomerData = [];\n        }\n\n        objs[j].this.downloadCustomerData;\n      }\n\n      return objs;\n    }\n\n    activeDeactive() {\n      if (this.activedeactive == 0) {\n        Swal.fire(\"Please select file type\");\n      }\n\n      if (this.activedeactive == 1) {\n        this.download();\n      }\n\n      if (this.activedeactive == 2) {\n        this.exportAsXLSX();\n      }\n    }\n\n    delete() {\n      this.deletecontact = {};\n      this.deletecontactList = [];\n\n      for (let i in this.allContactData) {\n        if ($(\"#check_\" + this.allContactData[i].customerClient.customerClientId).is(\":checked\")) {\n          this.deletecontact.customerClientId = JSON.parse(JSON.stringify(this.allContactData[i].customerClientId));\n          this.deletecontact.customerId = sessionStorage.getItem(\"customerId\");\n          this.deletecontact.listId = sessionStorage.getItem(\"listId\");\n          this.deletecontactList.push(JSON.parse(JSON.stringify(this.deletecontact)));\n        }\n      } // console.log(this.deletecontactList);\n\n\n      if (this.deletecontactList.length > 101) {\n        Swal.fire(\"Unable to delete more than 100 contacts, please select less than 100 contacts\");\n      } else {\n        if (this.filterDelete === \"universalDelete\") {\n          if (this.deletecontactList.length != 0) {\n            Swal.fire({\n              title: this.deletecontactList.length + ' record selected !',\n              text: \"Are you sure want to delete!\",\n              icon: 'warning',\n              showCancelButton: true,\n              confirmButtonColor: '#3085d6',\n              cancelButtonColor: '#d33',\n              confirmButtonText: 'Yes, Delete it!'\n            }).then(result => {\n              if (result.isConfirmed) {\n                let resp = this.conatctServicesService.deleteContact(this.deletecontactList);\n                resp.subscribe(data => {\n                  if (data != 0) {\n                    for (let i in this.allContactData) {\n                      for (let k in this.deletecontactList) {\n                        if (this.deletecontactList[k].customerClientId === this.allContactData[i].customerClient.customerClientId) {\n                          this.allContactData.splice(i, 1);\n                        }\n                      }\n                    }\n\n                    for (let i in this.customerClientIdList) {\n                      for (let k in this.deletecontactList) {\n                        if (this.deletecontactList[k].customerClientId === this.customerClientIdList[i].customerClient.customerClientId) {\n                          this.customerClientIdList.splice(i, 1);\n                        }\n                      }\n                    }\n\n                    Swal.fire('Delete!', 'Conatct has been deleted', 'success');\n                  }\n\n                  $(\"#allcheck\").prop(\"checked\", false);\n                });\n              }\n            });\n          } else {\n            Swal.fire(\"Please select atleast 1 contact\");\n          }\n        } else if (this.filterDelete === \"listDelete\") {\n          if (this.deletecontactList.length != 0) {\n            Swal.fire({\n              title: this.deletecontactList.length + ' record selected !',\n              text: \"Are you sure want to delete!\",\n              icon: 'warning',\n              showCancelButton: true,\n              confirmButtonColor: '#3085d6',\n              cancelButtonColor: '#d33',\n              confirmButtonText: 'Yes, Delete it!'\n            }).then(result => {\n              if (result.isConfirmed) {\n                let resp = this.conatctServicesService.deleteContactFromList(this.deletecontactList);\n                resp.subscribe(data => {\n                  // console.log(data, \"only for list\");\n                  if (data != 0) {\n                    for (let i in this.allContactData) {\n                      for (let k in this.deletecontactList) {\n                        if (this.deletecontactList[k].customerClientId === this.allContactData[i].customerClient.customerClientId) {\n                          this.allContactData.splice(i, 1);\n                        }\n                      }\n                    }\n\n                    for (let i in this.customerClientIdList) {\n                      for (let k in this.deletecontactList) {\n                        if (this.deletecontactList[k].customerClientId === this.customerClientIdList[i].customerClient.customerClientId) {\n                          this.customerClientIdList.splice(i, 1);\n                        }\n                      }\n                    }\n\n                    Swal.fire('Delete!', 'Contact has been deleted', 'success');\n                  }\n\n                  $(\"#allcheck\").prop(\"checked\", false);\n                });\n              }\n            });\n          } else {\n            Swal.fire(\"Please select atleast 1 contact\");\n          }\n        }\n      }\n    }\n\n  }\n\n  AllContactsComponent.ɵfac = function AllContactsComponent_Factory(t) {\n    return new (t || AllContactsComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Location), i0.ɵɵdirectiveInject(i3.PreviewService), i0.ɵɵdirectiveInject(i4.ConatctServicesService));\n  };\n\n  AllContactsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AllContactsComponent,\n    selectors: [[\"app-all-contacts\"]],\n    decls: 68,\n    vars: 19,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"row\"], [1, \"col-md-4\", \"mt-1\"], [1, \"col-md-8\", \"float-right\"], [1, \"dropdown\", \"d-flex\", \"float-right\"], [\"class\", \"form-control select\", \"id\", \"exampleFormControlSelect1\", 3, \"ngModel\", \"ngModelChange\", 4, \"ngIf\"], [1, \"\"], [\"class\", \"btn btn-info ml-3 btn-md size\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"btn btn-info ml-3 size\", 3, \"click\", 4, \"ngIf\"], [1, \"row\", \"mt-4\"], [1, \"col-md-7\", \"font-20\"], [\"class\", \"search-button d-flex pl-4\", 4, \"ngIf\"], [1, \"col-md-2\"], [1, \"dropdown\", \"float-right\"], [1, \"d-flex\"], [\"for\", \"exampleFormControlSelect1\", 1, \"pt-1\"], [\"id\", \"exampleFormControlSelect1\", 1, \"form-control\", \"ml-2\", 3, \"ngModel\", \"change\", \"ngModelChange\"], [\"value\", \"\"], [\"value\", \"Archive\"], [\"value\", \"Blacklist\"], [\"value\", \"Unsubscribe\"], [1, \"col-md-3\", \"float-right\"], [\"type\", \"text\", \"name\", \"search\", \"placeholder\", \"\\uF002 Search\", 1, \"form-control\", \"float-right\", 2, \"font-family\", \"Arial, FontAwesome\", 3, \"ngModel\", \"ngModelChange\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\", \"table-bordered\", \"tacho-table\"], [1, \"bg-dark\"], [1, \"text-center\"], [4, \"ngIf\"], [3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"mt-2\", \"col-xs-2\"], [1, \"col-md-4\", \"mt-2\"], [1, \"show-rows\"], [\"type\", \"number\", \"min\", \"1\", \"name\", \"rowsPerPage\", \"pattern\", \"^[1-9][0-9]*$\", \"placeholder\", \"Rows\", 1, \"rowsPerPage\", \"ml-2\", 3, \"ngModel\", \"ngModelChange\"], [\"rowsPerPage\", \"ngModel\"], [1, \"col-md-8\"], [1, \"float-right\", \"mt-2\"], [3, \"pageChange\"], [\"id\", \"exampleFormControlSelect1\", 1, \"form-control\", \"select\", 3, \"ngModel\", \"ngModelChange\"], [\"value\", \"0\", \"disabled\", \"\"], [\"value\", \"1\"], [\"value\", \"2\"], [1, \"btn\", \"btn-info\", \"ml-3\", \"btn-md\", \"size\", 3, \"click\"], [1, \"spinner-border\", 2, \"height\", \"15px\", \"width\", \"15px\"], [1, \"btn\", \"btn-info\", \"ml-3\", \"size\", 3, \"click\"], [1, \"search-button\", \"d-flex\", \"pl-4\"], [\"type\", \"checkbox\", \"id\", \"allcheck\", 1, \"form-check-input\", 2, \"margin-top\", \"4px\", 3, \"click\"], [1, \"p-1\", \"ml-1\"], [\"type\", \"submit\", \"class\", \"btn btn-info ml-1 size\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"submit\", \"class\", \"btn btn-info ml-3 size\", 3, \"click\", 4, \"ngIf\"], [1, \"form-control\", \"ml-2\", \"design\", 3, \"ngModel\", \"change\", \"ngModelChange\"], [\"hidden\", \"\", \"value\", \"\", \"disabled\", \"\", \"selected\", \"\"], [\"value\", \"listDelete\"], [\"value\", \"universalDelete\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\", \"ml-1\", \"size\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-info\", \"ml-3\", \"size\", 3, \"click\"], [1, \"noBorder\"], [1, \"text-danger\"], [1, \"d-flex\", \"justify-content-center\", \"text-danger\"], [\"role\", \"status\", 1, \"spinner-border\"], [1, \"sr-only\"], [3, \"click\"], [\"type\", \"checkbox\", \"type\", \"checkbox\", 1, \"form-check-input\", 3, \"id\", \"checked\", \"click\"], [1, \"text-primary\", \"cursor\", 3, \"click\"], [\"class\", \"help-bpx\", \"class\", \"help-bpx\", \"style\", \"color: red;\", 4, \"ngIf\"], [1, \"help-bpx\", 2, \"color\", \"red\"]],\n    template: function AllContactsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"strong\");\n        i0.ɵɵtext(5, \"All Contacts Details\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 4)(7, \"div\", 5);\n        i0.ɵɵtemplate(8, AllContactsComponent_select_8_Template, 7, 1, \"select\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, AllContactsComponent_button_10_Template, 3, 0, \"button\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, AllContactsComponent_button_11_Template, 3, 0, \"button\", 9);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(12, \"div\", 10)(13, \"div\", 11);\n        i0.ɵɵtemplate(14, AllContactsComponent_div_14_Template, 15, 4, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 13)(16, \"div\", 14)(17, \"div\", 15)(18, \"label\", 16)(19, \"h5\");\n        i0.ɵɵtext(20, \"Filter\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"select\", 17);\n        i0.ɵɵlistener(\"change\", function AllContactsComponent_Template_select_change_21_listener() {\n          return ctx.filterData();\n        })(\"ngModelChange\", function AllContactsComponent_Template_select_ngModelChange_21_listener($event) {\n          return ctx.filterFlg = $event;\n        });\n        i0.ɵɵelementStart(22, \"option\", 18);\n        i0.ɵɵtext(23, \"All\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"option\", 19);\n        i0.ɵɵtext(25, \"Archive\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"option\", 20);\n        i0.ɵɵtext(27, \"Blacklist\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"option\", 21);\n        i0.ɵɵtext(29, \"Unsubscribe\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(30, \"div\", 22)(31, \"input\", 23);\n        i0.ɵɵlistener(\"ngModelChange\", function AllContactsComponent_Template_input_ngModelChange_31_listener($event) {\n          return ctx.search = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(32, \"div\", 24)(33, \"table\", 25)(34, \"thead\", 26)(35, \"tr\")(36, \"th\", 27);\n        i0.ɵɵtext(37, \"Select\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"th\");\n        i0.ɵɵtext(39, \"Email Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"th\");\n        i0.ɵɵtext(41, \"First Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"th\");\n        i0.ɵɵtext(43, \"Last Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"th\");\n        i0.ɵɵtext(45, \"Mobile Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"th\");\n        i0.ɵɵtext(47, \"Blacklist\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"th\");\n        i0.ɵɵtext(49, \"Archive\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"th\");\n        i0.ɵɵtext(51, \"Unsubscribe\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(52, \"tbody\");\n        i0.ɵɵtemplate(53, AllContactsComponent_tr_53_Template, 16, 0, \"tr\", 28);\n        i0.ɵɵtemplate(54, AllContactsComponent_tr_54_Template, 18, 15, \"tr\", 29);\n        i0.ɵɵpipe(55, \"paginate\");\n        i0.ɵɵpipe(56, \"filter\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(57, \"div\", 30)(58, \"div\", 31)(59, \"div\", 32)(60, \"span\");\n        i0.ɵɵtext(61, \"Show Records\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"input\", 33, 34);\n        i0.ɵɵlistener(\"ngModelChange\", function AllContactsComponent_Template_input_ngModelChange_62_listener($event) {\n          return ctx.showData.rowsPerPage = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(64, AllContactsComponent_div_64_Template, 2, 1, \"div\", 28);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"div\", 35)(66, \"div\", 36)(67, \"pagination-controls\", 37);\n        i0.ɵɵlistener(\"pageChange\", function AllContactsComponent_Template_pagination_controls_pageChange_67_listener($event) {\n          return ctx.p = $event;\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        const _r6 = i0.ɵɵreference(63);\n\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.allContactData != null && ctx.allContactData.length != 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.allContactData != null && ctx.allContactData.length != 0 && ctx.itrationCount != 1 && ctx.itrationCount != undefined && ctx.itrationCount != null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.itrationCount == 1 || ctx.itrationCount == undefined || ctx.itrationCount == null);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.allContactData != null && ctx.allContactData.length != 0);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.filterFlg);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngModel\", ctx.search);\n        i0.ɵɵadvance(22);\n        i0.ɵɵproperty(\"ngIf\", ctx.customerClientIdList == null || ctx.customerClientIdList.length == 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(55, 10, i0.ɵɵpipeBind2(56, 13, ctx.allContactData, ctx.search), i0.ɵɵpureFunction2(16, _c0, ctx.showData.rowsPerPage, ctx.p)));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.showData.rowsPerPage);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", _r6.invalid || _r6.touched);\n      }\n    },\n    directives: [i2.NgIf, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgModel, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i2.NgForOf, i5.MinValidator, i5.NumberValueAccessor, i5.PatternValidator, i6.PaginationControlsComponent],\n    pipes: [i6.PaginatePipe, i7.Ng2SearchPipe],\n    styles: [\".size[_ngcontent-%COMP%]{width:100px;height:30px}.select[_ngcontent-%COMP%]{width:130px;height:30px}input[type=checkbox][_ngcontent-%COMP%]{width:15px;height:15px}.noBorder[_ngcontent-%COMP%]{border:0}.size[_ngcontent-%COMP%]{height:30px;width:110px}.design[_ngcontent-%COMP%]{height:30px;width:100px;background:#17a2b8;color:#fff;font-weight:700;font-size:12px}\"]\n  });\n  return AllContactsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}